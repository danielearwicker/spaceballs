{"version":3,"sources":["util.ts","AnimationCanvas.tsx","Vector2D.ts","Polar2D.ts","PolarCanvas.ts","ship.ts","Planet.ts","keyboard.ts","touch.ts","App.tsx","index.tsx"],"names":["required","ref","Error","instanceCounter","AnimationCanvas","className","render","container","useEffect","canvas","querySelector","ctx","getContext","dpr","window","devicePixelRatio","currentInstanceId","animationLoop","requestAnimationFrame","w","clientWidth","h","clientHeight","width","height","ws","hs","style","resizeCanvas","overflow","e","Vector2D","x","y","other","this","Polar2D","Math","atan2","sqrt","angle","radius","scalar","cos","sin","PolarCanvas","v","vector","moveTo","lineTo","shipRadius","shipShape","PI","flameShape","flameRadius","Planet","position","mass","beginPath","arc","fillStyle","fill","keysDown","isKeyDown","key","document","addEventListener","touches","saveTouches","ev","preventDefault","stopPropagation","Array","from","event","passive","usingTouch","documentElement","bigG","start","velocity","state","orientation","flame","trajectory","trajectoryClosed","planets","integrate","projectile","fromCentre","polar","planet","polarPosition","subtract","gravity","pow","add","renderFrame","polarCanvas","clearRect","save","strokeStyle","translate","length","s","hasEmbarked","n","next","push","isEmbarked","plotTrajectory","forEach","t","stroke","rotate","lineWidth","globalAlpha","ship","restore","firing","touch","pageX","pageY","undefined","touchVector","ReactDOM","href","getElementById"],"mappings":"oJAAO,SAASA,EAAYC,GACxB,IAAKA,EAAK,MAAM,IAAIC,MAAM,4BAC1B,OAAOD,E,oBCQPE,EAAkB,EAEf,SAASC,EAAT,GAAuE,IAA5CC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,OAErCC,EAAmC,KAuCvC,OArCAC,qBAAU,WACN,GAAKD,EAAL,CAEA,IAAME,EAAST,EAASO,EAAUG,cAAc,WAC1CC,EAAMX,EAASS,EAAOG,WAAW,OACjCC,EAAMC,OAAOC,kBAAoB,EACjCC,IAAsBb,EA4B5B,OAZA,SAASc,IACDd,IAAoBa,GAExBE,uBAAsB,YAjB1B,WACI,GAAKX,EAAL,CAEA,IAAMY,EAAIZ,EAAUa,YACdC,EAAId,EAAUe,aAAe,EAE/Bb,EAAOc,QAAUJ,IAAGV,EAAOc,MAAQJ,EAAIN,GACvCJ,EAAOe,SAAWH,IAAGZ,EAAOe,OAASH,EAAIR,GAE7C,IAAMY,EAAE,UAAMN,EAAN,MAAaO,EAAE,UAAML,EAAN,MACnBZ,EAAOkB,MAAMJ,QAAUE,IAAIhB,EAAOkB,MAAMJ,MAAQE,GAChDhB,EAAOkB,MAAMH,SAAWE,IAAIjB,EAAOkB,MAAMH,OAASE,IAOlDE,GACAtB,EAAOK,GACPM,OAIRA,GAEO,WAAQd,SAIf,yBAAKE,UAAWA,GAAa,mBACxBsB,MAAO,CAACE,SAAU,UAClB5B,IAAK,SAAA6B,GAAC,OAAIvB,EAAYuB,IACvB,kC,kBCvDCC,EAAb,WAEI,WAA4BC,EACAC,GAAY,yBADZD,IACW,KAAXC,IAHhC,gDAKQC,GACA,OAAO,IAAIH,EAASI,KAAKH,EAAIE,EAAMF,EAAGG,KAAKF,EAAIC,EAAMD,KAN7D,+BASaC,GACL,OAAO,IAAIH,EAASI,KAAKH,EAAIE,EAAMF,EAAGG,KAAKF,EAAIC,EAAMD,KAV7D,4BAcQ,OAAO,IAAIG,EAAQC,KAAKC,MAAMH,KAAKF,EAAGE,KAAKH,GACxBK,KAAKE,KAAMJ,KAAKH,EAAIG,KAAKH,EAAMG,KAAKF,EAAIE,KAAKF,QAfxE,KCAaG,EAAb,WAEI,WAA4BI,EACAC,GAAiB,yBADjBD,QACgB,KAAhBC,SAHhC,qDAUaC,GACL,OAAO,IAAIN,EAAQD,KAAKK,MAAOL,KAAKM,OAASC,KAXrD,6BAcWF,GACH,OAAO,IAAIJ,EAAQD,KAAKK,MAAQA,EAAOL,KAAKM,UAfpD,6BAMQ,OAAO,IAAIV,EAASM,KAAKM,IAAIR,KAAKK,OAASL,KAAKM,OAC5BJ,KAAKO,IAAIT,KAAKK,OAASL,KAAKM,YAPxD,KCAaI,EAAb,WAEI,WAA4BlC,GAAgC,yBAAhCA,MAFhC,mDAIW6B,EAAeC,GAClB,IAAMK,EAAI,IAAIV,EAAQI,EAAOC,GAAQM,OACrCZ,KAAKxB,IAAIqC,OAAOF,EAAEd,EAAGc,EAAEb,KAN/B,6BASWO,EAAeC,GAClB,IAAMK,EAAI,IAAIV,EAAQI,EAAOC,GAAQM,OACrCZ,KAAKxB,IAAIsC,OAAOH,EAAEd,EAAGc,EAAEb,OAX/B,KCAMiB,EAAa,GACbC,EAAY,IAAAd,KAAKe,GACjBC,EAAahB,KAAKe,IAAM,EAAE,GAC1BE,EAAc,GCHb,IAAMC,EAAb,WAEI,WACoBC,EACAC,GAAe,yBADfD,WACc,KAAdC,OAJxB,mDAUW9C,GAEHA,EAAI+C,YACJ/C,EAAIgD,IAAIxB,KAAKqB,SAASxB,EAAGG,KAAKqB,SAASvB,EAAGE,KAAKM,OAAQ,EAAa,EAAVJ,KAAKe,IAE/DzC,EAAIiD,UAAY,OAChBjD,EAAIkD,SAhBZ,6BAOQ,OAAmB,GAAZ1B,KAAKsB,SAPpB,KCFMK,EAAuC,GAKtC,SAASC,EAAUC,GACtB,QAASF,EAASE,GAJtBC,SAASC,iBAAiB,WAAW,SAAApC,GAAC,OAAIgC,EAAShC,EAAEkC,MAAO,KAC5DC,SAASC,iBAAiB,SAAS,SAAApC,GAAC,OAAIgC,EAAShC,EAAEkC,MAAO,KCF1D,IAAIG,EAAmB,GAEvB,SAASC,EAAYC,GACjBA,EAAGC,iBACHD,EAAGE,kBACHJ,EAAUK,MAAMC,KAAKJ,EAAGF,S,2BAG5B,YAAoB,CAAC,aAAc,WAAY,aAA/C,+CAAsE,CAAC,IAA5DO,EAA2D,QAClET,SAASC,iBAAiBQ,EAAON,EAAa,CAAEO,SAAS,K,gTCA7D,IAAMC,EAAa,iBAAkBX,SAASY,gBAuB9C,IAAMC,EAAO,IAOPC,EAAoB,CACtBvB,SAAU,IAAIzB,EAAS,IAAK,GAC5BiD,SAAU,IAAIjD,EAAS,GAAI,IAG3BkD,EAAQF,EACRG,EAAc,EACdC,EAAQ,EACRC,EAAyB,GACzBC,GAAmB,EAEjBC,EAAoB,CACtB,IAAI/B,EAAO,IAAIxB,GAAU,KAAM,KAAM,GACrC,IAAIwB,EAAO,IAAIxB,EAAS,IAAK,KAAM,IAGvC,SAASwD,EAAUC,EAAwBjE,EAAeC,GAEtD,IAAMiE,EAAaD,EAAWhC,SAASkC,MAAMjD,OAC7C,KAAIgD,EAAalE,GAASkE,EAAajE,GAAvC,CAIA,IAAIwD,EAAWQ,EAAWR,SAPoE,uBAS9F,YAAqBM,EAArB,+CAA8B,CAAC,IAApBK,EAAmB,QAEpBC,EAAgBJ,EAAWhC,SAASqC,SAASF,EAAOnC,UAAUkC,MAEpE,GAAIE,EAAcnD,OAASkD,EAAOlD,OAC9B,OAGJ,IAAMqD,EAAUH,EAAOlC,KAAOqB,EAAOzC,KAAK0D,IAAIH,EAAcnD,OAAQ,GAEpEuC,EAAWA,EAASgB,IAAI,IAAI5D,EAAQwD,EAAcpD,OAAQsD,GAAS/C,SAnBuB,kFAwB9F,MAAO,CAAES,SAFQgC,EAAWhC,SAASwC,IAAIhB,GAEtBA,aA4BvB,SAASiB,EAAYtF,GAEjB,IAAMuF,EAAc,IAAIrD,EAAYlC,GAE9BQ,EAAIR,EAAIF,OAAOc,MAAOF,EAAIV,EAAIF,OAAOe,OAE3Cb,EAAIwF,UAAU,EAAG,EAAGhF,EAAGE,GAEvBV,EAAIyF,OACJzF,EAAI0F,YAAc,QAElB1F,EAAI2F,UAAUnF,EAAI,EAAGE,EAAI,GApC7B,SAAwBE,EAAeC,GAEnC4D,EAAWmB,OAAS,EACpBlB,GAAmB,EAKnB,IAHA,IAAImB,EAAIvB,EACJwB,GAAc,EAETC,EAAI,EAAGA,EAAI,IAAOA,IAAK,CAC5B,IAAMC,EAAOpB,EAAUiB,EAAGjF,EAAOC,GACjC,IAAKmF,EACD,MAEJvB,EAAWwB,KAAKD,EAAKnD,UAGrB,IAAMqD,GAFNL,EAAIG,GAEiBnD,SAASqC,SAASZ,EAAMzB,UAAUkC,MAAMjD,OAAS,GACtE,IAAKoE,GAAcJ,EAAa,CAC5BpB,GAAmB,EACnB,MAEJoB,EAAcI,GAiBlBC,CAAe3F,EAAGE,GAEd+D,EAAWmB,SACX5F,EAAI0F,YAAc,OAClB1F,EAAI+C,YACJ/C,EAAIqC,OAAOoC,EAAW,GAAGpD,EAAGoD,EAAW,GAAGnD,GAC1CmD,EAAW2B,SAAQ,SAAAC,GAAOrG,EAAIsC,OAAO+D,EAAEhF,EAAGgF,EAAE/E,MACxCoD,GACA1E,EAAIsC,OAAOmC,EAAW,GAAGpD,EAAGoD,EAAW,GAAGnD,GAE9CtB,EAAIsG,SACJtG,EAAI0F,YAAc,SAxB0B,2BA2BhD,YAAqBf,EAArB,+CAA8B,SACnBhF,OAAOK,IA5B8B,kFA+BhDA,EAAIyF,OACJzF,EAAI2F,UAAUrB,EAAMzB,SAASxB,EAAGiD,EAAMzB,SAASvB,GAC/CtB,EAAIuG,OAAOhC,GJtIR,SAAczE,EAAqB0E,GACtC1E,EAAOE,IAAI+C,YAEXjD,EAAOuC,OAAO,EAAGE,GACjBzC,EAAOwC,OAAOE,EAAWD,GACzBzC,EAAOwC,OAAOZ,KAAKe,GAAIF,EAAW,GAClCzC,EAAOwC,QAAQE,EAAWD,GAC1BzC,EAAOwC,OAAO,EAAGC,GAEjBzC,EAAOE,IAAIiD,UAAY,OACvBnD,EAAOE,IAAIwG,UAAY,EACvB1G,EAAOE,IAAIkD,OACXpD,EAAOE,IAAIsG,SAEP9B,EAAQ,IACR1E,EAAOE,IAAI+C,YACXjD,EAAOuC,OAAOX,KAAKe,GAAIF,EAAW,GAClCzC,EAAOwC,OAAOI,EAAYC,GAC1B7C,EAAOwC,QAAQI,EAAYC,GAC3B7C,EAAOwC,OAAOZ,KAAKe,GAAIF,EAAW,GAElCzC,EAAOE,IAAIyG,YAAcjC,EACzB1E,EAAOE,IAAIiD,UAAY,OACvBnD,EAAOE,IAAIkD,QIiHfwD,CAAKnB,EAAaf,GAElBxE,EAAI2G,UAEJ,IAAIC,GAAS,EAEPC,EDvICrD,EAAQoC,OAAS,CAAEvE,EAAGmC,EAAQ,GAAGsD,MAAOxF,EAAGkC,EAAQ,GAAGuD,YAAUC,ECwIvE,GAAIH,EAAO,CAEP,IAAMI,EAAc,IAAI7F,EACnByF,EAAMxF,EAAIlB,OAAOC,iBAAqBI,EAAI,EAC1CqG,EAAMvF,EAAInB,OAAOC,iBAAqBM,EAAI,GAE/C6D,EAAc0C,EAAY/B,SAASZ,EAAMzB,UAAUkC,MAAMlD,MACzD+E,GAAS,EAGTxD,EAAU,KACVmB,GAAe,IACRnB,EAAU,OACjBmB,GAAe,KAGfnB,EAAU,OACVwD,GAAS,GAGTA,GACAtC,E,yVAAK,IACEA,EADF,CAEDD,SAAUC,EAAMD,SAASgB,IAAI,IAAI5D,EAAQ8C,EAAa,KAAMnC,UAEhEoC,EAAQ,GAEJA,EAAQ,IAAGA,GAAS,IAG5BF,EAAQM,EAAUN,EAAO9D,EAAGE,IAAM0D,E,0BC9KtC8C,IAASvH,OAAO,mBDMT,WAEH,OACI,yBAAKD,UAAU,OACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,gBAEXuE,EAAU,mLAKd,yBAAKvE,UAAU,QACX,uBAAGyH,KAAK,kDAAR,YAGR,kBAAC1H,EAAD,CAAiBE,OAAQ2F,OCtBrB,MAAShC,SAAS8D,eAAe,U","file":"static/js/main.0982e8d6.chunk.js","sourcesContent":["export function required<T>(ref: T | undefined | null) {    \n    if (!ref) throw new Error(\"Something terribly wrong\");\n    return ref;\n}\n","import { required } from \"./util\";\nimport { useEffect } from \"react\";\n\nimport React from \"react\";\n\nexport interface AnimationCanvasProps {\n    className?: string;\n    render(ctx: CanvasRenderingContext2D): void;\n}\n\nlet instanceCounter = 0;\n\nexport function AnimationCanvas({ className, render }: AnimationCanvasProps) {\n\n    let container: HTMLDivElement | null = null;\n\n    useEffect(() => {\n        if (!container) return;\n        \n        const canvas = required(container.querySelector(\"canvas\"));\n        const ctx = required(canvas.getContext(\"2d\"));\n        const dpr = window.devicePixelRatio || 1;\n        const currentInstanceId = ++instanceCounter;        \n\n        function resizeCanvas() {\n            if (!container) return;\n\n            const w = container.clientWidth, \n                  h = container.clientHeight - 1;\n\n            if (canvas.width !== w) canvas.width = w * dpr;\n            if (canvas.height !== h) canvas.height = h * dpr;\n\n            const ws = `${w}px`, hs = `${h}px`;\n            if (canvas.style.width !== ws) canvas.style.width = ws;\n            if (canvas.style.height !== hs) canvas.style.height = hs;\n        }\n\n        function animationLoop() {\n            if (instanceCounter !== currentInstanceId) return;\n\n            requestAnimationFrame(() => {\n                resizeCanvas();\n                render(ctx);\n                animationLoop();\n            });\n        }\n    \n        animationLoop();\n\n        return () => { instanceCounter++; };\n    });\n\n    return (\n        <div className={className || \"animation-canvas\"} \n             style={{overflow: \"hidden\"}}\n             ref={e => container = e}>\n            <canvas/>\n        </div>\n    );\n}\n\n","import { Polar2D } from \"./Polar2D\";\n\nexport class Vector2D {\n\n    constructor(public readonly x: number, \n                public readonly y: number) { }\n\n    add(other: Vector2D) {\n        return new Vector2D(this.x + other.x, this.y + other.y);\n    }\n\n    subtract(other: Vector2D) {\n        return new Vector2D(this.x - other.x, this.y - other.y);\n    }\n\n    get polar() {\n        return new Polar2D(Math.atan2(this.y, this.x),\n                           Math.sqrt((this.x * this.x) + (this.y * this.y)));\n    }\n}\n","import { Vector2D } from \"./Vector2D\";\n\nexport class Polar2D {\n\n    constructor(public readonly angle: number, \n                public readonly radius: number) { }\n\n    get vector() {\n        return new Vector2D(Math.cos(this.angle) * this.radius,\n                            Math.sin(this.angle) * this.radius);\n    }\n\n    multiply(scalar: number) {\n        return new Polar2D(this.angle, this.radius * scalar);\n    }\n\n    rotate(angle: number) {\n        return new Polar2D(this.angle + angle, this.radius);\n    }\n}\n","import { Polar2D } from \"./Polar2D\";\n\nexport class PolarCanvas {\n\n    constructor(public readonly ctx: CanvasRenderingContext2D) { }\n\n    moveTo(angle: number, radius: number) {\n        const v = new Polar2D(angle, radius).vector;\n        this.ctx.moveTo(v.x, v.y);\n    }\n\n    lineTo(angle: number, radius: number) {\n        const v = new Polar2D(angle, radius).vector;\n        this.ctx.lineTo(v.x, v.y);\n    }\n}\n","import { PolarCanvas } from \"./PolarCanvas\";\n\nconst shipRadius = 30;\nconst shipShape = Math.PI * (3/4);\nconst flameShape = Math.PI * (5/6);\nconst flameRadius = 40;\n\nexport function ship(canvas: PolarCanvas, flame: number) {\n    canvas.ctx.beginPath();\n\n    canvas.moveTo(0, shipRadius);\n    canvas.lineTo(shipShape, shipRadius);\n    canvas.lineTo(Math.PI, shipRadius/3);\n    canvas.lineTo(-shipShape, shipRadius);\n    canvas.lineTo(0, shipRadius);\n\n    canvas.ctx.fillStyle = \"#349\";\n    canvas.ctx.lineWidth = 2;\n    canvas.ctx.fill();\n    canvas.ctx.stroke();\n\n    if (flame > 0) {\n        canvas.ctx.beginPath();\n        canvas.moveTo(Math.PI, shipRadius/2);\n        canvas.lineTo(flameShape, flameRadius);\n        canvas.lineTo(-flameShape, flameRadius);\n        canvas.lineTo(Math.PI, shipRadius/2);\n\n        canvas.ctx.globalAlpha = flame;\n        canvas.ctx.fillStyle = \"#db0\";        \n        canvas.ctx.fill();\n    }\n}\n","import { Vector2D } from \"./Vector2D\";\n\nexport class Planet {\n\n    constructor(\n        public readonly position: Vector2D,\n        public readonly mass: number) { }\n\n    get radius() {\n        return this.mass * 10;\n    }\n\n    render(ctx: CanvasRenderingContext2D) {\n\n        ctx.beginPath();\n        ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2);\n    \n        ctx.fillStyle = \"#832\";\n        ctx.fill();\n    }\n}\n","const keysDown: { [key: string]: boolean } = {};\n\ndocument.addEventListener(\"keydown\", e => keysDown[e.key] = true);\ndocument.addEventListener(\"keyup\", e => keysDown[e.key] = false);\n\nexport function isKeyDown(key: string) {\n    return !!keysDown[key];\n}\n","\nlet touches: Touch[] = [];\n\nfunction saveTouches(ev: TouchEvent) {\n    ev.preventDefault();        \n    ev.stopPropagation();        \n    touches = Array.from(ev.touches);\n}\n\nfor (const event of [\"touchstart\", \"touchend\", \"touchmove\"] as const) {\n    document.addEventListener(event, saveTouches, { passive: false });\n}\n\nexport function getSingleTouch() {\n    return touches.length ? { x: touches[0].pageX, y: touches[0].pageY } : undefined; \n}\n","import { AnimationCanvas } from \"./AnimationCanvas\";\nimport { PolarCanvas } from \"./PolarCanvas\";\nimport { ship } from \"./ship\";\nimport { Planet } from \"./Planet\";\nimport { isKeyDown } from \"./keyboard\";\nimport { getSingleTouch } from \"./touch\";\nimport React from \"react\";\nimport { Polar2D } from \"./Polar2D\";\nimport { Vector2D } from \"./Vector2D\";\n\nconst usingTouch = 'ontouchstart' in document.documentElement;\n\nexport function App() {\n\n    return (\n        <div className=\"app\">\n            <div className=\"caption\">\n                <div className=\"instructions\">\n                {\n                    usingTouch \n                        ? `Tap the screen to fire your booster rocket in the direction of your finger.`\n                        : `Press Z to rotate your ship anti-clockwise, X for clockwise. Press M to fire your booster rocket.`\n                }                    \n                </div>\n                <div className=\"link\">\n                    <a href=\"https://github.com/danielearwicker/spaceballs/\">Source</a>\n                </div>\n            </div>\n            <AnimationCanvas render={renderFrame}/>\n        </div>\n    );\n}\n\nconst bigG = 400;\n\ninterface Projectile {\n    readonly position: Vector2D;\n    readonly velocity: Vector2D;\n}\n\nconst start: Projectile = {\n    position: new Vector2D(400, 0),\n    velocity: new Vector2D(0, -2)\n};\n\nlet state = start;\nlet orientation = 0;\nlet flame = 0;\nlet trajectory: Vector2D[] = [];\nlet trajectoryClosed = false;\n\nconst planets: Planet[] = [\n    new Planet(new Vector2D(-200, -200), 5),\n    new Planet(new Vector2D(200, 200), 2)\n];\n\nfunction integrate(projectile: Projectile, width: number, height: number): Projectile | undefined {\n\n    const fromCentre = projectile.position.polar.radius;\n    if (fromCentre > width && fromCentre > height) {\n        return undefined;\n    }\n\n    let velocity = projectile.velocity;\n\n    for (const planet of planets) {\n\n        const polarPosition = projectile.position.subtract(planet.position).polar;\n\n        if (polarPosition.radius < planet.radius) {\n            return undefined;\n        }\n\n        const gravity = planet.mass * bigG / Math.pow(polarPosition.radius, 2);\n\n        velocity = velocity.add(new Polar2D(polarPosition.angle, -gravity).vector);\n    }\n    \n    const position = projectile.position.add(velocity);\n\n    return { position, velocity };\n}\n\nfunction plotTrajectory(width: number, height: number) {\n\n    trajectory.length = 0;\n    trajectoryClosed = false;\n\n    let s = state;\n    let hasEmbarked = false;\n\n    for (let n = 0; n < 10000; n++) {\n        const next = integrate(s, width, height);\n        if (!next) {\n            break;\n        }\n        trajectory.push(next.position);\n        s = next;\n\n        const isEmbarked = s.position.subtract(state.position).polar.radius > 10;\n        if (!isEmbarked && hasEmbarked) {\n            trajectoryClosed = true;\n            break;\n        }\n        hasEmbarked = isEmbarked;\n    }\n}\n\nfunction renderFrame(ctx: CanvasRenderingContext2D) {\n\n    const polarCanvas = new PolarCanvas(ctx);\n\n    const w = ctx.canvas.width, h = ctx.canvas.height;\n    \n    ctx.clearRect(0, 0, w, h);\n    \n    ctx.save();\n    ctx.strokeStyle = \"white\";\n    \n    ctx.translate(w / 2, h / 2);\n\n    plotTrajectory(w, h);\n    \n    if (trajectory.length) {\n        ctx.strokeStyle = \"gray\";\n        ctx.beginPath();\n        ctx.moveTo(trajectory[0].x, trajectory[0].y);\n        trajectory.forEach(t => { ctx.lineTo(t.x, t.y); });\n        if (trajectoryClosed) {\n            ctx.lineTo(trajectory[0].x, trajectory[0].y);\n        }\n        ctx.stroke();\n        ctx.strokeStyle = \"white\";\n    }\n\n    for (const planet of planets) {\n        planet.render(ctx);\n    }\n\n    ctx.save();\n    ctx.translate(state.position.x, state.position.y);\n    ctx.rotate(orientation);\n\n    ship(polarCanvas, flame);\n\n    ctx.restore();\n\n    let firing = false;\n\n    const touch = getSingleTouch();\n    if (touch) {\n\n        const touchVector = new Vector2D(\n            (touch.x * window.devicePixelRatio) - (w / 2),\n            (touch.y * window.devicePixelRatio) - (h / 2));\n\n        orientation = touchVector.subtract(state.position).polar.angle;\n        firing = true;\n    }\n\n    if (isKeyDown(\"z\")) {\n        orientation -= 0.05;\n    } else if (isKeyDown(\"x\")) {\n        orientation += 0.05;\n    }\n\n    if (isKeyDown(\"m\")) {\n        firing = true;\n    }\n    \n    if (firing) {\n        state = { \n            ...state,\n            velocity: state.velocity.add(new Polar2D(orientation, 0.02).vector)\n        }\n        flame = 1;\n    } else {\n        if (flame > 0) flame -= 0.1;\n    }\n\n    state = integrate(state, w, h) || start;    \n}\n","import { App } from './App';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}