{"version":3,"sources":["util.ts","AnimationCanvas.tsx","Vector2D.ts","Polar2D.ts","PolarCanvas.ts","ship.ts","planet.ts","keyboard.ts","App.tsx","index.tsx"],"names":["required","ref","Error","instanceCounter","AnimationCanvas","className","render","container","useEffect","canvas","querySelector","ctx","getContext","dpr","window","devicePixelRatio","currentInstanceId","animationLoop","requestAnimationFrame","w","clientWidth","h","clientHeight","width","height","ws","hs","style","resizeCanvas","overflow","e","Vector2D","x","y","other","this","Polar2D","Math","atan2","sqrt","angle","radius","scalar","cos","sin","PolarCanvas","v","vector","moveTo","lineTo","shipRadius","shipShape","PI","flameShape","flameRadius","planetRadius","keysDown","isKeyDown","key","document","addEventListener","bigG","start","position","velocity","state","orientation","flame","trajectory","trajectoryClosed","integrate","projectile","polarPosition","polar","gravity","pow","add","renderFrame","polarCanvas","clearRect","save","strokeStyle","translate","length","s","hasEmbarked","n","next","push","isEmbarked","subtract","plotTrajectory","beginPath","forEach","t","stroke","arc","fillStyle","fill","planet","rotate","lineWidth","globalAlpha","ship","restore","ReactDOM","href","getElementById"],"mappings":"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","file":"static/js/main.9adb547a.chunk.js","sourcesContent":["export function required<T>(ref: T | undefined | null) {    \n    if (!ref) throw new Error(\"Something terribly wrong\");\n    return ref;\n}\n","import { required } from \"./util\";\nimport { useEffect } from \"react\";\n\nimport React from \"react\";\n\nexport interface AnimationCanvasProps {\n    className?: string;\n    render(ctx: CanvasRenderingContext2D): void;\n}\n\nlet instanceCounter = 0;\n\nexport function AnimationCanvas({ className, render }: AnimationCanvasProps) {\n\n    let container: HTMLDivElement | null = null;\n\n    useEffect(() => {\n        if (!container) return;\n        \n        const canvas = required(container.querySelector(\"canvas\"));\n        const ctx = required(canvas.getContext(\"2d\"));\n        const dpr = window.devicePixelRatio || 1;\n        const currentInstanceId = ++instanceCounter;        \n\n        function resizeCanvas() {\n            if (!container) return;\n\n            const w = container.clientWidth, \n                  h = container.clientHeight - 1;\n\n            if (canvas.width !== w) canvas.width = w * dpr;\n            if (canvas.height !== h) canvas.height = h * dpr;\n\n            const ws = `${w}px`, hs = `${h}px`;\n            if (canvas.style.width !== ws) canvas.style.width = ws;\n            if (canvas.style.height !== hs) canvas.style.height = hs;\n        }\n\n        function animationLoop() {\n            if (instanceCounter !== currentInstanceId) return;\n\n            requestAnimationFrame(() => {\n                resizeCanvas();\n                render(ctx);\n                animationLoop();\n            });\n        }\n    \n        animationLoop();\n\n        return () => { instanceCounter++; };\n    });\n\n    return (\n        <div className={className || \"animation-canvas\"} \n             style={{overflow: \"hidden\"}}\n             ref={e => container = e}>\n            <canvas/>\n        </div>\n    );\n}\n\n","import { Polar2D } from \"./Polar2D\";\n\nexport class Vector2D {\n\n    constructor(public readonly x: number, \n                public readonly y: number) { }\n\n    add(other: Vector2D) {\n        return new Vector2D(this.x + other.x, this.y + other.y);\n    }\n\n    subtract(other: Vector2D) {\n        return new Vector2D(this.x - other.x, this.y - other.y);\n    }\n\n    get polar() {\n        return new Polar2D(Math.atan2(this.y, this.x),\n                           Math.sqrt((this.x * this.x) + (this.y * this.y)));\n    }\n}\n","import { Vector2D } from \"./Vector2D\";\n\nexport class Polar2D {\n\n    constructor(public readonly angle: number, \n                public readonly radius: number) { }\n\n    get vector() {\n        return new Vector2D(Math.cos(this.angle) * this.radius,\n                            Math.sin(this.angle) * this.radius);\n    }\n\n    multiply(scalar: number) {\n        return new Polar2D(this.angle, this.radius * scalar);\n    }\n\n    rotate(angle: number) {\n        return new Polar2D(this.angle + angle, this.radius);\n    }\n}\n","import { Polar2D } from \"./Polar2D\";\n\nexport class PolarCanvas {\n\n    constructor(public readonly ctx: CanvasRenderingContext2D) { }\n\n    moveTo(angle: number, radius: number) {\n        const v = new Polar2D(angle, radius).vector;\n        this.ctx.moveTo(v.x, v.y);\n    }\n\n    lineTo(angle: number, radius: number) {\n        const v = new Polar2D(angle, radius).vector;\n        this.ctx.lineTo(v.x, v.y);\n    }\n}\n","import { PolarCanvas } from \"./PolarCanvas\";\n\nconst shipRadius = 30;\nconst shipShape = Math.PI * (3/4);\nconst flameShape = Math.PI * (5/6);\nconst flameRadius = 40;\n\nexport function ship(canvas: PolarCanvas, flame: number) {\n    canvas.ctx.beginPath();\n\n    canvas.moveTo(0, shipRadius);\n    canvas.lineTo(shipShape, shipRadius);\n    canvas.lineTo(Math.PI, shipRadius/3);\n    canvas.lineTo(-shipShape, shipRadius);\n    canvas.lineTo(0, shipRadius);\n\n    canvas.ctx.fillStyle = \"#349\";\n    canvas.ctx.lineWidth = 2;\n    canvas.ctx.fill();\n    canvas.ctx.stroke();\n\n    if (flame > 0) {\n        canvas.ctx.beginPath();\n        canvas.moveTo(Math.PI, shipRadius/2);\n        canvas.lineTo(flameShape, flameRadius);\n        canvas.lineTo(-flameShape, flameRadius);\n        canvas.lineTo(Math.PI, shipRadius/2);\n\n        canvas.ctx.globalAlpha = flame;\n        canvas.ctx.fillStyle = \"#db0\";        \n        canvas.ctx.fill();\n    }\n}\n","export const planetRadius = 50;\n\nexport function planet(ctx: CanvasRenderingContext2D) {\n\n    ctx.beginPath();\n    ctx.arc(0, 0, planetRadius, 0, Math.PI * 2);\n\n    ctx.fillStyle = \"#832\";\n    ctx.fill();\n}\n","const keysDown: { [key: string]: boolean } = {};\n\ndocument.addEventListener(\"keydown\", e => keysDown[e.key] = true);\ndocument.addEventListener(\"keyup\", e => keysDown[e.key] = false);\n\nexport function isKeyDown(key: string) {\n    return !!keysDown[key];\n}\n","import { AnimationCanvas } from \"./AnimationCanvas\";\nimport { PolarCanvas } from \"./PolarCanvas\";\nimport { ship } from \"./ship\";\nimport { planet, planetRadius } from \"./planet\";\nimport { isKeyDown } from \"./keyboard\";\n\nimport React from \"react\";\nimport { Polar2D } from \"./Polar2D\";\nimport { Vector2D } from \"./Vector2D\";\n\nexport function App() {\n\n    return (\n        <div className=\"app\">\n            <div className=\"caption\">\n                <div className=\"instructions\">\n                    Press Z to rotate your ship anti-clockwise, X for clockwise. Press M to fire your booster rocket.\n                </div>\n                <div className=\"link\">\n                    <a href=\"https://github.com/danielearwicker/spaceballs/\">Source</a>\n                </div>\n            </div>\n            <AnimationCanvas render={renderFrame}/>\n        </div>\n    );\n}\n\nconst bigG = 2000;\n\ninterface Projectile {\n    readonly position: Vector2D;\n    readonly velocity: Vector2D;\n}\n\nconst start: Projectile = {\n    position: new Vector2D(400, 0),\n    velocity: new Vector2D(0, -2)\n};\n\nlet state = start;\nlet orientation = 0;\nlet flame = 0;\nlet trajectory: Vector2D[] = [];\nlet trajectoryClosed = false;\n\nfunction integrate(projectile: Projectile, width: number, height: number): Projectile | undefined {\n    const polarPosition = projectile.position.polar;\n\n    if (polarPosition.radius < planetRadius || \n        (polarPosition.radius > width &&\n         polarPosition.radius > height)) {\n\n        return undefined;\n    }\n\n    const gravity = bigG / Math.pow(polarPosition.radius, 2);\n\n    const velocity = projectile.velocity.add(new Polar2D(polarPosition.angle, -gravity).vector);\n    const position = projectile.position.add(velocity);\n\n    return { position, velocity };\n}\n\nfunction plotTrajectory(width: number, height: number) {\n\n    trajectory.length = 0;\n    trajectoryClosed = false;\n\n    let s = state;\n    let hasEmbarked = false;\n\n    for (let n = 0; n < 10000; n++) {\n        const next = integrate(s, width, height);\n        if (!next) {\n            break;\n        }\n        trajectory.push(next.position);\n        s = next;\n\n        const isEmbarked = s.position.subtract(state.position).polar.radius > 10;\n        if (!isEmbarked && hasEmbarked) {\n            trajectoryClosed = true;\n            break;\n        }\n        hasEmbarked = isEmbarked;\n    }\n}\n\nfunction renderFrame(ctx: CanvasRenderingContext2D) {\n\n    const polarCanvas = new PolarCanvas(ctx);\n\n    const w = ctx.canvas.width, h = ctx.canvas.height;\n    \n    ctx.clearRect(0, 0, w, h);\n    \n    ctx.save();\n    ctx.strokeStyle = \"white\";\n    \n    ctx.translate(w / 2, h / 2);\n\n    plotTrajectory(w, h);\n    \n    if (trajectory.length) {\n        ctx.strokeStyle = \"gray\";\n        ctx.beginPath();\n        ctx.moveTo(trajectory[0].x, trajectory[0].y);\n        trajectory.forEach(t => { ctx.lineTo(t.x, t.y); });\n        if (trajectoryClosed) {\n            ctx.lineTo(trajectory[0].x, trajectory[0].y);\n        }\n        ctx.stroke();\n        ctx.strokeStyle = \"white\";\n    }\n\n    planet(ctx);\n\n    ctx.save();\n    ctx.translate(state.position.x, state.position.y);\n    ctx.rotate(orientation);\n\n    ship(polarCanvas, flame);\n\n    ctx.restore();\n\n    if (isKeyDown(\"z\")) {\n        orientation -= 0.05;\n    } else if (isKeyDown(\"x\")) {\n        orientation += 0.05;\n    }\n\n    if (isKeyDown(\"m\")) {\n        state = { \n            ...state,\n            velocity: state.velocity.add(new Polar2D(orientation, 0.02).vector)\n        }\n        flame = 1;\n    } else {\n        if (flame > 0) flame -= 0.1;\n    }\n\n    state = integrate(state, w, h) || start;    \n}\n","import { App } from './App';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}